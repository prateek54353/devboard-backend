const { DataTypes } = require('sequelize');
const { sequelize } = require('../config/database');
const { User } = require('./user.model');

/**
 * Challenge model definition
 * Stores coding challenges generated by AI or manually created
 */
const Challenge = sequelize.define(
  'Challenge',
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    title: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notEmpty: true,
        len: [1, 255],
      },
    },
    description: {
      type: DataTypes.TEXT,
      allowNull: false,
    },
    difficulty: {
      type: DataTypes.ENUM('easy', 'medium', 'hard'),
      defaultValue: 'medium',
    },
    language: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    tags: {
      type: DataTypes.ARRAY(DataTypes.STRING),
      defaultValue: [],
    },
    source: {
      type: DataTypes.ENUM('ai', 'manual'),
      defaultValue: 'ai',
    },
    expiresAt: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    isPublic: {
      type: DataTypes.BOOLEAN,
      defaultValue: true,
    },
    createdBy: {
      type: DataTypes.UUID,
      allowNull: true,
      references: {
        model: 'Users',
        key: 'id',
      },
    },
  },
  {
    timestamps: true,
  }
);

/**
 * UserChallenge model definition
 * Tracks user progress on challenges
 */
const UserChallenge = sequelize.define(
  'UserChallenge',
  {
    id: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      primaryKey: true,
    },
    userId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'Users',
        key: 'id',
      },
    },
    challengeId: {
      type: DataTypes.UUID,
      allowNull: false,
      references: {
        model: 'Challenges',
        key: 'id',
      },
    },
    status: {
      type: DataTypes.ENUM('not_started', 'in_progress', 'completed', 'skipped'),
      defaultValue: 'not_started',
    },
    solution: {
      type: DataTypes.TEXT,
      allowNull: true,
    },
    completedAt: {
      type: DataTypes.DATE,
      allowNull: true,
    },
  },
  {
    timestamps: true,
    indexes: [
      // Composite index for user and challenge
      {
        unique: true,
        fields: ['userId', 'challengeId'],
      },
    ],
  }
);

// Define associations
Challenge.belongsTo(User, { foreignKey: 'createdBy', as: 'creator' });
User.hasMany(Challenge, { foreignKey: 'createdBy', as: 'createdChallenges' });

Challenge.belongsToMany(User, { 
  through: UserChallenge,
  foreignKey: 'challengeId',
  as: 'participants'
});

User.belongsToMany(Challenge, { 
  through: UserChallenge,
  foreignKey: 'userId',
  as: 'challenges'
});

module.exports = {
  Challenge,
  UserChallenge,
};